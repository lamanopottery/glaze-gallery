---
import { isLoggedIn, redirectToLogin } from "@/utils/login";
import { glaze1Key, glaze2Key } from "@/constants";
import { Base } from "@/layouts";
import { GlazeSelect, GlazeTile } from "@/components";
import {
  NotFoodSafeIcon,
  RunnyIcon,
  BlisterJumpCrawlIcon,
  IconInParentheses,
} from "@/components/icons";
import glazeComboInfo from "@/data/glaze-combo-info.json";

if (!(await isLoggedIn(Astro))) {
  return redirectToLogin(Astro);
}
---

<script>
  import { glaze1Key, glaze2Key } from "@/constants";

  const updateTiles = (url: URL) => {
    const selectedGlaze1 = url.searchParams.get(glaze1Key);
    const selectedGlaze2 = url.searchParams.get(glaze2Key);

    for (const glazeTileElement of document.getElementsByClassName("glaze-tile")) {
      if (glazeTileElement instanceof HTMLElement) {
        const [glaze1, glaze2] = glazeTileElement.id.split("-");
        const show =
          (selectedGlaze1 === null || selectedGlaze1 === glaze1) &&
          (selectedGlaze2 === null || selectedGlaze2 === glaze2);
        glazeTileElement.style.display = show ? "block" : "none";
      }
    }
  };

  function onSelectChange(this: HTMLSelectElement) {
    const url = new URL(window.location.href);
    const { name, value } = this;
    if (value === "any") {
      url.searchParams.delete(name);
    } else {
      url.searchParams.set(name, value);
    }
    updateTiles(url);
    history.pushState(null, "", url);
  }

  document.addEventListener("DOMContentLoaded", () => {
    const selectElement1 = document.getElementById(glaze1Key);
    const selectElement2 = document.getElementById(glaze2Key);

    if (
      selectElement1 instanceof HTMLSelectElement &&
      selectElement2 instanceof HTMLSelectElement
    ) {
      selectElement1.addEventListener("change", onSelectChange);
      selectElement2.addEventListener("change", onSelectChange);

      window.addEventListener("popstate", () => {
        const url = new URL(window.location.href);
        selectElement1.value = url.searchParams.get(glaze1Key) ?? "any";
        selectElement2.value = url.searchParams.get(glaze2Key) ?? "any";
        updateTiles(url);
      });
    }
  });
</script>

<Base>
  <div class="flex max-w-4xl flex-col gap-3 self-center text-base">
    <p>
      Glazes can be filtered by first and second dip. Captions are in the format &ldquo;1st dip
      (under) \ 2nd dip (over)&rdquo;. Icons indicate if the glaze combination is not food safe <IconInParentheses
        Icon={NotFoodSafeIcon}
      />, runny
      <IconInParentheses Icon={RunnyIcon} />, or if the combination may blister, jump, or crawl <IconInParentheses
        Icon={BlisterJumpCrawlIcon}
      />. Click images for a larger picture and additional notes.
    </p>
    <p>
      <strong>Disclaimer:</strong> Results will vary based on the thickness of the glaze and the clay,
      the structure of the piece, how the piece is dipped, etc.
    </p>
  </div>
  <div class="flex justify-center">
    <hr class="max-w-4xl grow border-stone-300" />
  </div>
  <div class="flex flex-col items-center justify-center gap-3 lg:flex-row">
    <GlazeSelect name={glaze1Key} label="1st dip (under):" />
    <div class="hidden lg:block">\</div>
    <GlazeSelect name={glaze2Key} label="2nd dip (over):" />
  </div>
  <div class="grid grid-cols-[repeat(auto-fill,minmax(300px,1fr))] items-start gap-5">
    {Object.keys(glazeComboInfo).map((glazeCombo) => <GlazeTile {glazeCombo} />)}
  </div>
</Base>
